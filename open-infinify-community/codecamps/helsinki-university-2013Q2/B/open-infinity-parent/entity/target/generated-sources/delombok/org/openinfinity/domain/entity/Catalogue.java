// Generated by delombok at Wed May 15 13:54:30 EEST 2013
/*
 * Copyright (c) 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openinfinity.domain.entity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import org.openinfinity.core.annotation.NotScript;
import org.openinfinity.domain.repository.CRUDRepository;
import org.openinfinity.domain.repository.RepositoryItem;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
/**
 * Catalogue entity.
 * 
 * @author Ilkka Leinonen
 */

@Document
public class Catalogue implements RepositoryItem {
	@Id
	@NotScript
	private String id;
	private Collection<Product> products = Collections.checkedCollection(new ArrayList<Product>(), Product.class);
	
	public void addProduct(Product product) {
		this.products.add(product);
	}
	
	public String getId() {
		return id;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public Collection<Product> getProducts() {
		return products;
	}
	
	public void setProducts(Collection<Product> products) {
		this.products = products;
	}
	
	@java.lang.SuppressWarnings("all")
	public Catalogue() {
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Catalogue)) return false;
		final Catalogue other = (Catalogue)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (this.getId() == null ? other.getId() != null : !this.getId().equals((java.lang.Object)other.getId())) return false;
		if (this.getProducts() == null ? other.getProducts() != null : !this.getProducts().equals((java.lang.Object)other.getProducts())) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof Catalogue;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		result = result * PRIME + (this.getId() == null ? 0 : this.getId().hashCode());
		result = result * PRIME + (this.getProducts() == null ? 0 : this.getProducts().hashCode());
		return result;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "Catalogue(id=" + this.getId() + ", products=" + this.getProducts() + ")";
	}
}